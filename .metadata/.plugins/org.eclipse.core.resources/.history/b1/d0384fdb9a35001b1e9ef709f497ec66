package com.prueba.tecnica.app.controller;

import java.util.List;
import java.util.Optional;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.StreamSupport;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.prueba.tecnica.app.entity.Tarea;
import com.prueba.tecnica.app.service.TareaService;

@RestController
//@Produces({ "application/json", "application/xml" })
@RequestMapping("/api/tareas")
public class TareaController {

	@Autowired
	public TareaService tareaService;
	
	
	// Se crea una nueva Tarea
	@PostMapping
	public ResponseEntity<?> create(@RequestBody Tarea tarea){
		return ResponseEntity.status(HttpStatus.CREATED).body(tareaService.save(tarea));
	}
	
	
	//Leer una Tarea
	@GetMapping("/{identificador}")
	public ResponseEntity<?> read(@PathVariable int identificador){
		
		Optional<Tarea> oTarea = tareaService.findById(identificador);
		
		if(!oTarea.isPresent()) {
			return ResponseEntity.notFound().build();
		}
		
		return ResponseEntity.ok(oTarea);
		
	}
	
	
	//Actualizar una Tarea
	@PutMapping("/{identificador}")
	public ResponseEntity<?> update(@RequestBody Tarea tarea, @PathVariable int identificador){
		
		Optional<Tarea> oTarea = tareaService.findById(identificador);
		
		if(!oTarea.isPresent()) {
			return ResponseEntity.notFound().build();
		}
		
		oTarea.get().setDescripcion(tarea.getDescripcion());
		oTarea.get().setFechaCreacion(tarea.getFechaCreacion());
		oTarea.get().setVigente(tarea.isVigente());
		
		return ResponseEntity.status(HttpStatus.CREATED).body(tareaService.save(oTarea.get()));
	}
	
	
	@DeleteMapping("/{identificador}")
	public ResponseEntity<?> delete(@PathVariable int identificador){
		
		Optional<Tarea> oTarea = tareaService.findById(identificador);
		
		if(!tareaService.findById(identificador).isPresent()) {
			return ResponseEntity.notFound().build();
		}
		
		tareaService.deleteById(identificador);
		
		return ResponseEntity.ok().build();
	}
	
	
	@GetMapping
	public List<Tarea> readAll(){
		
		List<Tarea> tareas = StreamSupport.stream(tareaService.findAll().spliterator(), false).collect(Collectors.toList());
		
		return tareas;
	}
}
